/*
 * generated by Xtext 2.9.1
 */
package org.tetrabox.example.formatting;

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.util.Pair;

/**
 * This class contains custom formatting declarations.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#
 * formatting on how and when to use it.
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an
 * example
 */
public class MinitlFormatter extends AbstractDeclarativeFormatter {

	@Override
	protected void configureFormatting(FormattingConfig c) {
		org.tetrabox.example.services.MinitlGrammarAccess f = (org.tetrabox.example.services.MinitlGrammarAccess) getGrammarAccess();

		// Mananage brackets
		for (Pair<Keyword, Keyword> pair : f.findKeywordPairs("{", "}")) {
			c.setIndentation(pair.getFirst(), pair.getSecond());
			c.setLinewrap(1).after(pair.getFirst());
			c.setLinewrap(1).before(pair.getSecond());
			c.setLinewrap(1).after(pair.getSecond());
		}

		// Manage comma
		for (Keyword comma : f.findKeywords(",")) {
			c.setNoLinewrap().before(comma);
			c.setNoSpace().before(comma);
		}

		// Manage dot
		for (Keyword dot : f.findKeywords(".")) {
			c.setNoSpace().before(dot);
			c.setNoSpace().after(dot);
		}

		// Manage comments (???)
		c.setLinewrap(0, 1, 2).before(f.getSL_COMMENTRule());
		c.setLinewrap(0, 1, 2).before(f.getML_COMMENTRule());
		c.setLinewrap(0, 1, 1).after(f.getML_COMMENTRule());

		// Manage metamodels
		c.setLinewrap().after(f.getMetamodelRule());

		// Manage separating stuff
		c.setLinewrap(2).before(f.getRuleRule());
		c.setLinewrap(2).before(f.getInputMetamodelRule());

	}
}
