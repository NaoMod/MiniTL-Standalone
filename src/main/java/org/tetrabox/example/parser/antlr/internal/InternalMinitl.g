/*
 * generated by Xtext 2.25.0
 */
grammar InternalMinitl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.tetrabox.example.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.tetrabox.example.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.tetrabox.example.services.MinitlGrammarAccess;

}

@parser::members {

 	private MinitlGrammarAccess grammarAccess;

    public InternalMinitlParser(TokenStream input, MinitlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Transformation";
   	}

   	@Override
   	protected MinitlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTransformation
entryRuleTransformation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransformationRule()); }
	iv_ruleTransformation=ruleTransformation
	{ $current=$iv_ruleTransformation.current; }
	EOF;

// Rule Transformation
ruleTransformation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='transformation'
		{
			newLeafNode(otherlv_0, grammarAccess.getTransformationAccess().getTransformationKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTransformationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTransformationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTransformationAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTransformationAccess().getInputMetamodelInputMetamodelParserRuleCall_3_0());
				}
				lv_inputMetamodel_3_0=ruleInputMetamodel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTransformationRule());
					}
					set(
						$current,
						"inputMetamodel",
						lv_inputMetamodel_3_0,
						"org.tetrabox.example.Minitl.InputMetamodel");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_4='outputMetamodel'
			{
				newLeafNode(otherlv_4, grammarAccess.getTransformationAccess().getOutputMetamodelKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTransformationAccess().getOutputMetamodelMetamodelParserRuleCall_4_1_0());
					}
					lv_outputMetamodel_5_0=ruleMetamodel
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTransformationRule());
						}
						set(
							$current,
							"outputMetamodel",
							lv_outputMetamodel_5_0,
							"org.tetrabox.example.Minitl.Metamodel");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTransformationAccess().getRulesRuleParserRuleCall_5_0_0());
					}
					lv_rules_6_0=ruleRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTransformationRule());
						}
						add(
							$current,
							"rules",
							lv_rules_6_0,
							"org.tetrabox.example.Minitl.Rule");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTransformationAccess().getRulesRuleParserRuleCall_5_1_0());
					}
					lv_rules_7_0=ruleRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTransformationRule());
						}
						add(
							$current,
							"rules",
							lv_rules_7_0,
							"org.tetrabox.example.Minitl.Rule");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getTransformationAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleInputMetamodel
entryRuleInputMetamodel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputMetamodelRule()); }
	iv_ruleInputMetamodel=ruleInputMetamodel
	{ $current=$iv_ruleInputMetamodel.current; }
	EOF;

// Rule InputMetamodel
ruleInputMetamodel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='inputMetamodel'
		{
			newLeafNode(otherlv_0, grammarAccess.getInputMetamodelAccess().getInputMetamodelKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getInputMetamodelAccess().getMetamodelParserRuleCall_1());
		}
		this_Metamodel_1=ruleMetamodel
		{
			$current = $this_Metamodel_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMetamodel
entryRuleMetamodel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMetamodelRule()); }
	iv_ruleMetamodel=ruleMetamodel
	{ $current=$iv_ruleMetamodel.current; }
	EOF;

// Rule Metamodel
ruleMetamodel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMetamodelRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getMetamodelAccess().getPackagesEPackageCrossReference_0_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getMetamodelAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMetamodelRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getMetamodelAccess().getPackagesEPackageCrossReference_1_1_0());
					}
					ruleFQN
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rule'
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getRuleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='from'
		{
			newLeafNode(otherlv_3, grammarAccess.getRuleAccess().getFromKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getObjectTemplatesObjectTemplateParserRuleCall_4_0());
				}
				lv_objectTemplates_4_0=ruleObjectTemplate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					add(
						$current,
						"objectTemplates",
						lv_objectTemplates_4_0,
						"org.tetrabox.example.Minitl.ObjectTemplate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='to'
		{
			newLeafNode(otherlv_5, grammarAccess.getRuleAccess().getToKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getObjectTemplatesObjectTemplateParserRuleCall_6_0());
				}
				lv_objectTemplates_6_0=ruleObjectTemplate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					add(
						$current,
						"objectTemplates",
						lv_objectTemplates_6_0,
						"org.tetrabox.example.Minitl.ObjectTemplate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleObjectTemplate
entryRuleObjectTemplate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectTemplateRule()); }
	iv_ruleObjectTemplate=ruleObjectTemplate
	{ $current=$iv_ruleObjectTemplate.current; }
	EOF;

// Rule ObjectTemplate
ruleObjectTemplate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getObjectTemplateAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectTemplateRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getObjectTemplateAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectTemplateRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getObjectTemplateAccess().getTypeEClassCrossReference_2_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='{'
			{
				newLeafNode(otherlv_3, grammarAccess.getObjectTemplateAccess().getLeftCurlyBracketKeyword_3_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getObjectTemplateAccess().getBindingsBindingParserRuleCall_3_1_0_0());
						}
						lv_bindings_4_0=ruleBinding
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getObjectTemplateRule());
							}
							add(
								$current,
								"bindings",
								lv_bindings_4_0,
								"org.tetrabox.example.Minitl.Binding");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_5=';'
					{
						newLeafNode(otherlv_5, grammarAccess.getObjectTemplateAccess().getSemicolonKeyword_3_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getObjectTemplateAccess().getBindingsBindingParserRuleCall_3_1_1_1_0());
							}
							lv_bindings_6_0=ruleBinding
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getObjectTemplateRule());
								}
								add(
									$current,
									"bindings",
									lv_bindings_6_0,
									"org.tetrabox.example.Minitl.Binding");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			(
				otherlv_7=';'
				{
					newLeafNode(otherlv_7, grammarAccess.getObjectTemplateAccess().getSemicolonKeyword_3_2());
				}
			)?
			otherlv_8='}'
			{
				newLeafNode(otherlv_8, grammarAccess.getObjectTemplateAccess().getRightCurlyBracketKeyword_3_3());
			}
		)?
	)
;

// Entry rule entryRuleBinding
entryRuleBinding returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBindingRule()); }
	iv_ruleBinding=ruleBinding
	{ $current=$iv_ruleBinding.current; }
	EOF;

// Rule Binding
ruleBinding returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBindingRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getBindingAccess().getFeatureEStructuralFeatureCrossReference_0_0());
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getBindingAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBindingAccess().getValueValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBindingRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.tetrabox.example.Minitl.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getValueAccess().getMaybeBinaryParserRuleCall());
	}
	this_MaybeBinary_0=ruleMaybeBinary
	{
		$current = $this_MaybeBinary_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleMaybeBinary
entryRuleMaybeBinary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMaybeBinaryRule()); }
	iv_ruleMaybeBinary=ruleMaybeBinary
	{ $current=$iv_ruleMaybeBinary.current; }
	EOF;

// Rule MaybeBinary
ruleMaybeBinary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMaybeBinaryAccess().getMaybeFieldAccessValueParserRuleCall_0());
		}
		this_MaybeFieldAccessValue_0=ruleMaybeFieldAccessValue
		{
			$current = $this_MaybeFieldAccessValue_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getMaybeBinaryAccess().getBinaryExpressionExpressionsAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMaybeBinaryAccess().getOperatorOperatorEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMaybeBinaryRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.tetrabox.example.Minitl.Operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMaybeBinaryAccess().getExpressionsMaybeFieldAccessValueParserRuleCall_1_2_0());
					}
					lv_expressions_3_0=ruleMaybeFieldAccessValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMaybeBinaryRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_3_0,
							"org.tetrabox.example.Minitl.MaybeFieldAccessValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMaybeFieldAccessValue
entryRuleMaybeFieldAccessValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMaybeFieldAccessValueRule()); }
	iv_ruleMaybeFieldAccessValue=ruleMaybeFieldAccessValue
	{ $current=$iv_ruleMaybeFieldAccessValue.current; }
	EOF;

// Rule MaybeFieldAccessValue
ruleMaybeFieldAccessValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMaybeFieldAccessValueAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMaybeFieldAccessValueAccess().getFieldAccessValueObjectAction_1_0(),
						$current);
				}
			)
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getMaybeFieldAccessValueAccess().getFullStopKeyword_1_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMaybeFieldAccessValueRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getMaybeFieldAccessValueAccess().getFeatureEStructuralFeatureCrossReference_1_2_0());
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getStringValueParserRuleCall_0());
		}
		this_StringValue_0=ruleStringValue
		{
			$current = $this_StringValue_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getObjectTemplateValueParserRuleCall_1());
		}
		this_ObjectTemplateValue_1=ruleObjectTemplateValue
		{
			$current = $this_ObjectTemplateValue_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getMaybeBinaryParserRuleCall_2_1());
			}
			this_MaybeBinary_3=ruleMaybeBinary
			{
				$current = $this_MaybeBinary_3.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	iv_ruleStringValue=ruleStringValue
	{ $current=$iv_ruleStringValue.current; }
	EOF;

// Rule StringValue
ruleStringValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleObjectTemplateValue
entryRuleObjectTemplateValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectTemplateValueRule()); }
	iv_ruleObjectTemplateValue=ruleObjectTemplateValue
	{ $current=$iv_ruleObjectTemplateValue.current; }
	EOF;

// Rule ObjectTemplateValue
ruleObjectTemplateValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getObjectTemplateValueRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getObjectTemplateValueAccess().getObjecttemplateObjectTemplateCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFQNRule()); }
	iv_ruleFQN=ruleFQN
	{ $current=$iv_ruleFQN.current.getText(); }
	EOF;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Rule Operator
ruleOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getOperatorAccess().getADDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOperatorAccess().getADDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getOperatorAccess().getSUBEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOperatorAccess().getSUBEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
