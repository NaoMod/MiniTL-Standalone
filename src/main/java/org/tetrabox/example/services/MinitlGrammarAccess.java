/*
 * generated by Xtext 2.25.0
 */
package org.tetrabox.example.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MinitlGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.example.Minitl.Transformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransformationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputMetamodelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputMetamodelInputMetamodelParserRuleCall_3_0 = (RuleCall)cInputMetamodelAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOutputMetamodelKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOutputMetamodelAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOutputMetamodelMetamodelParserRuleCall_4_1_0 = (RuleCall)cOutputMetamodelAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cRulesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cRulesRuleParserRuleCall_5_0_0 = (RuleCall)cRulesAssignment_5_0.eContents().get(0);
		private final Assignment cRulesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_5_1_0 = (RuleCall)cRulesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Transformation:
		//    'transformation'
		//    name=ID
		//    '{'
		//    (inputMetamodel=InputMetamodel)?
		//    ('outputMetamodel' outputMetamodel=Metamodel)?
		//    (rules+=Rule (rules+=Rule)*)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'transformation'
		//name=ID
		//'{'
		//(inputMetamodel=InputMetamodel)?
		//('outputMetamodel' outputMetamodel=Metamodel)?
		//(rules+=Rule (rules+=Rule)*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'transformation'
		public Keyword getTransformationKeyword_0() { return cTransformationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(inputMetamodel=InputMetamodel)?
		public Assignment getInputMetamodelAssignment_3() { return cInputMetamodelAssignment_3; }
		
		//InputMetamodel
		public RuleCall getInputMetamodelInputMetamodelParserRuleCall_3_0() { return cInputMetamodelInputMetamodelParserRuleCall_3_0; }
		
		//('outputMetamodel' outputMetamodel=Metamodel)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'outputMetamodel'
		public Keyword getOutputMetamodelKeyword_4_0() { return cOutputMetamodelKeyword_4_0; }
		
		//outputMetamodel=Metamodel
		public Assignment getOutputMetamodelAssignment_4_1() { return cOutputMetamodelAssignment_4_1; }
		
		//Metamodel
		public RuleCall getOutputMetamodelMetamodelParserRuleCall_4_1_0() { return cOutputMetamodelMetamodelParserRuleCall_4_1_0; }
		
		//(rules+=Rule (rules+=Rule)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//rules+=Rule
		public Assignment getRulesAssignment_5_0() { return cRulesAssignment_5_0; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_5_0_0() { return cRulesRuleParserRuleCall_5_0_0; }
		
		//(rules+=Rule)*
		public Assignment getRulesAssignment_5_1() { return cRulesAssignment_5_1; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_5_1_0() { return cRulesRuleParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class InputMetamodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.example.Minitl.InputMetamodel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputMetamodelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cMetamodelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//InputMetamodel returns Metamodel:
		//    'inputMetamodel' Metamodel;
		@Override public ParserRule getRule() { return rule; }
		
		//'inputMetamodel' Metamodel
		public Group getGroup() { return cGroup; }
		
		//'inputMetamodel'
		public Keyword getInputMetamodelKeyword_0() { return cInputMetamodelKeyword_0; }
		
		//Metamodel
		public RuleCall getMetamodelParserRuleCall_1() { return cMetamodelParserRuleCall_1; }
	}
	public class MetamodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.example.Minitl.Metamodel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackagesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPackagesEPackageCrossReference_0_0 = (CrossReference)cPackagesAssignment_0.eContents().get(0);
		private final RuleCall cPackagesEPackageFQNParserRuleCall_0_0_1 = (RuleCall)cPackagesEPackageCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPackagesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cPackagesEPackageCrossReference_1_1_0 = (CrossReference)cPackagesAssignment_1_1.eContents().get(0);
		private final RuleCall cPackagesEPackageFQNParserRuleCall_1_1_0_1 = (RuleCall)cPackagesEPackageCrossReference_1_1_0.eContents().get(1);
		
		//Metamodel:
		//    packages+=[ecore::EPackage|FQN] ("," packages+=[ecore::EPackage|FQN])*;
		@Override public ParserRule getRule() { return rule; }
		
		//packages+=[ecore::EPackage|FQN] ("," packages+=[ecore::EPackage|FQN])*
		public Group getGroup() { return cGroup; }
		
		//packages+=[ecore::EPackage|FQN]
		public Assignment getPackagesAssignment_0() { return cPackagesAssignment_0; }
		
		//[ecore::EPackage|FQN]
		public CrossReference getPackagesEPackageCrossReference_0_0() { return cPackagesEPackageCrossReference_0_0; }
		
		//FQN
		public RuleCall getPackagesEPackageFQNParserRuleCall_0_0_1() { return cPackagesEPackageFQNParserRuleCall_0_0_1; }
		
		//("," packages+=[ecore::EPackage|FQN])*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//packages+=[ecore::EPackage|FQN]
		public Assignment getPackagesAssignment_1_1() { return cPackagesAssignment_1_1; }
		
		//[ecore::EPackage|FQN]
		public CrossReference getPackagesEPackageCrossReference_1_1_0() { return cPackagesEPackageCrossReference_1_1_0; }
		
		//FQN
		public RuleCall getPackagesEPackageFQNParserRuleCall_1_1_0_1() { return cPackagesEPackageFQNParserRuleCall_1_1_0_1; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.example.Minitl.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cObjectTemplatesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjectTemplatesObjectTemplateParserRuleCall_4_0 = (RuleCall)cObjectTemplatesAssignment_4.eContents().get(0);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cObjectTemplatesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cObjectTemplatesObjectTemplateParserRuleCall_6_0 = (RuleCall)cObjectTemplatesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Rule returns Rule:
		//    'rule'
		//    name=ID
		//    '{'
		//    'from' objectTemplates+=ObjectTemplate
		//    'to' objectTemplates+=ObjectTemplate
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'rule'
		//name=ID
		//'{'
		//'from' objectTemplates+=ObjectTemplate
		//'to' objectTemplates+=ObjectTemplate
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'from'
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//objectTemplates+=ObjectTemplate
		public Assignment getObjectTemplatesAssignment_4() { return cObjectTemplatesAssignment_4; }
		
		//ObjectTemplate
		public RuleCall getObjectTemplatesObjectTemplateParserRuleCall_4_0() { return cObjectTemplatesObjectTemplateParserRuleCall_4_0; }
		
		//'to'
		public Keyword getToKeyword_5() { return cToKeyword_5; }
		
		//objectTemplates+=ObjectTemplate
		public Assignment getObjectTemplatesAssignment_6() { return cObjectTemplatesAssignment_6; }
		
		//ObjectTemplate
		public RuleCall getObjectTemplatesObjectTemplateParserRuleCall_6_0() { return cObjectTemplatesObjectTemplateParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ObjectTemplateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.example.Minitl.ObjectTemplate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEClassCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEClassFQNParserRuleCall_2_0_1 = (RuleCall)cTypeEClassCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cBindingsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cBindingsBindingParserRuleCall_3_1_0_0 = (RuleCall)cBindingsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cBindingsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cBindingsBindingParserRuleCall_3_1_1_1_0 = (RuleCall)cBindingsAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//ObjectTemplate:
		//    name=ID ':' type=[ecore::EClass|FQN]
		//    ('{'
		//    (bindings+=Binding (";" bindings+=Binding)*)? ';'?
		//    '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=[ecore::EClass|FQN]
		//('{'
		//(bindings+=Binding (";" bindings+=Binding)*)? ';'?
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=[ecore::EClass|FQN]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[ecore::EClass|FQN]
		public CrossReference getTypeEClassCrossReference_2_0() { return cTypeEClassCrossReference_2_0; }
		
		//FQN
		public RuleCall getTypeEClassFQNParserRuleCall_2_0_1() { return cTypeEClassFQNParserRuleCall_2_0_1; }
		
		//('{'
		//(bindings+=Binding (";" bindings+=Binding)*)? ';'?
		//'}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//(bindings+=Binding (";" bindings+=Binding)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//bindings+=Binding
		public Assignment getBindingsAssignment_3_1_0() { return cBindingsAssignment_3_1_0; }
		
		//Binding
		public RuleCall getBindingsBindingParserRuleCall_3_1_0_0() { return cBindingsBindingParserRuleCall_3_1_0_0; }
		
		//(";" bindings+=Binding)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//";"
		public Keyword getSemicolonKeyword_3_1_1_0() { return cSemicolonKeyword_3_1_1_0; }
		
		//bindings+=Binding
		public Assignment getBindingsAssignment_3_1_1_1() { return cBindingsAssignment_3_1_1_1; }
		
		//Binding
		public RuleCall getBindingsBindingParserRuleCall_3_1_1_1_0() { return cBindingsBindingParserRuleCall_3_1_1_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}
	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.example.Minitl.Binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFeatureEStructuralFeatureCrossReference_0_0 = (CrossReference)cFeatureAssignment_0.eContents().get(0);
		private final RuleCall cFeatureEStructuralFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cFeatureEStructuralFeatureCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Binding:
		//    feature=[ecore::EStructuralFeature|ID] '=' value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//feature=[ecore::EStructuralFeature|ID] '=' value=Value
		public Group getGroup() { return cGroup; }
		
		//feature=[ecore::EStructuralFeature|ID]
		public Assignment getFeatureAssignment_0() { return cFeatureAssignment_0; }
		
		//[ecore::EStructuralFeature|ID]
		public CrossReference getFeatureEStructuralFeatureCrossReference_0_0() { return cFeatureEStructuralFeatureCrossReference_0_0; }
		
		//ID
		public RuleCall getFeatureEStructuralFeatureIDTerminalRuleCall_0_0_1() { return cFeatureEStructuralFeatureIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.example.Minitl.Value");
		private final RuleCall cMaybeBinaryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Value:
		//    MaybeBinary;
		@Override public ParserRule getRule() { return rule; }
		
		//MaybeBinary
		public RuleCall getMaybeBinaryParserRuleCall() { return cMaybeBinaryParserRuleCall; }
	}
	public class MaybeBinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.example.Minitl.MaybeBinary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMaybeFieldAccessValueParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionsMaybeFieldAccessValueParserRuleCall_1_2_0 = (RuleCall)cExpressionsAssignment_1_2.eContents().get(0);
		
		//MaybeBinary returns Value:
		//    MaybeFieldAccessValue ({BinaryExpression.expressions+=current} operator=Operator expressions+=MaybeFieldAccessValue)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MaybeFieldAccessValue ({BinaryExpression.expressions+=current} operator=Operator expressions+=MaybeFieldAccessValue)*
		public Group getGroup() { return cGroup; }
		
		//MaybeFieldAccessValue
		public RuleCall getMaybeFieldAccessValueParserRuleCall_0() { return cMaybeFieldAccessValueParserRuleCall_0; }
		
		//({BinaryExpression.expressions+=current} operator=Operator expressions+=MaybeFieldAccessValue)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.expressions+=current}
		public Action getBinaryExpressionExpressionsAction_1_0() { return cBinaryExpressionExpressionsAction_1_0; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_1_0() { return cOperatorOperatorEnumRuleCall_1_1_0; }
		
		//expressions+=MaybeFieldAccessValue
		public Assignment getExpressionsAssignment_1_2() { return cExpressionsAssignment_1_2; }
		
		//MaybeFieldAccessValue
		public RuleCall getExpressionsMaybeFieldAccessValueParserRuleCall_1_2_0() { return cExpressionsMaybeFieldAccessValueParserRuleCall_1_2_0; }
	}
	public class MaybeFieldAccessValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.example.Minitl.MaybeFieldAccessValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFieldAccessValueObjectAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFeatureAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cFeatureEStructuralFeatureCrossReference_1_2_0 = (CrossReference)cFeatureAssignment_1_2.eContents().get(0);
		private final RuleCall cFeatureEStructuralFeatureIDTerminalRuleCall_1_2_0_1 = (RuleCall)cFeatureEStructuralFeatureCrossReference_1_2_0.eContents().get(1);
		
		//MaybeFieldAccessValue returns Value:
		//    Primary ({FieldAccessValue.object=current} '.' feature=[ecore::EStructuralFeature|ID])*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({FieldAccessValue.object=current} '.' feature=[ecore::EStructuralFeature|ID])*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({FieldAccessValue.object=current} '.' feature=[ecore::EStructuralFeature|ID])*
		public Group getGroup_1() { return cGroup_1; }
		
		//{FieldAccessValue.object=current}
		public Action getFieldAccessValueObjectAction_1_0() { return cFieldAccessValueObjectAction_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//feature=[ecore::EStructuralFeature|ID]
		public Assignment getFeatureAssignment_1_2() { return cFeatureAssignment_1_2; }
		
		//[ecore::EStructuralFeature|ID]
		public CrossReference getFeatureEStructuralFeatureCrossReference_1_2_0() { return cFeatureEStructuralFeatureCrossReference_1_2_0; }
		
		//ID
		public RuleCall getFeatureEStructuralFeatureIDTerminalRuleCall_1_2_0_1() { return cFeatureEStructuralFeatureIDTerminalRuleCall_1_2_0_1; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.example.Minitl.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectTemplateValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cMaybeBinaryParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Primary returns Value:
		//    StringValue | ObjectTemplateValue | '(' MaybeBinary ')';
		@Override public ParserRule getRule() { return rule; }
		
		//StringValue | ObjectTemplateValue | '(' MaybeBinary ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }
		
		//ObjectTemplateValue
		public RuleCall getObjectTemplateValueParserRuleCall_1() { return cObjectTemplateValueParserRuleCall_1; }
		
		//'(' MaybeBinary ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//MaybeBinary
		public RuleCall getMaybeBinaryParserRuleCall_2_1() { return cMaybeBinaryParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.example.Minitl.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//    value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class ObjectTemplateValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.example.Minitl.ObjectTemplateValue");
		private final Assignment cObjecttemplateAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cObjecttemplateObjectTemplateCrossReference_0 = (CrossReference)cObjecttemplateAssignment.eContents().get(0);
		private final RuleCall cObjecttemplateObjectTemplateIDTerminalRuleCall_0_1 = (RuleCall)cObjecttemplateObjectTemplateCrossReference_0.eContents().get(1);
		
		//ObjectTemplateValue:
		//    objecttemplate=[ObjectTemplate|ID];
		@Override public ParserRule getRule() { return rule; }
		
		//objecttemplate=[ObjectTemplate|ID]
		public Assignment getObjecttemplateAssignment() { return cObjecttemplateAssignment; }
		
		//[ObjectTemplate|ID]
		public CrossReference getObjecttemplateObjectTemplateCrossReference_0() { return cObjecttemplateObjectTemplateCrossReference_0; }
		
		//ID
		public RuleCall getObjecttemplateObjectTemplateIDTerminalRuleCall_0_1() { return cObjecttemplateObjectTemplateIDTerminalRuleCall_0_1; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.example.Minitl.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//    ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ("." ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class OperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.example.Minitl.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBHyphenMinusKeyword_1_0 = (Keyword)cSUBEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Operator returns Operator:
		//    ADD='+' | SUB='-';
		public EnumRule getRule() { return rule; }
		
		//ADD='+' | SUB='-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD='+'
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }
		
		//SUB='-'
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration_1() { return cSUBEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getSUBHyphenMinusKeyword_1_0() { return cSUBHyphenMinusKeyword_1_0; }
	}
	
	private final TransformationElements pTransformation;
	private final InputMetamodelElements pInputMetamodel;
	private final MetamodelElements pMetamodel;
	private final RuleElements pRule;
	private final ObjectTemplateElements pObjectTemplate;
	private final BindingElements pBinding;
	private final ValueElements pValue;
	private final MaybeBinaryElements pMaybeBinary;
	private final MaybeFieldAccessValueElements pMaybeFieldAccessValue;
	private final PrimaryElements pPrimary;
	private final StringValueElements pStringValue;
	private final ObjectTemplateValueElements pObjectTemplateValue;
	private final OperatorElements eOperator;
	private final FQNElements pFQN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MinitlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTransformation = new TransformationElements();
		this.pInputMetamodel = new InputMetamodelElements();
		this.pMetamodel = new MetamodelElements();
		this.pRule = new RuleElements();
		this.pObjectTemplate = new ObjectTemplateElements();
		this.pBinding = new BindingElements();
		this.pValue = new ValueElements();
		this.pMaybeBinary = new MaybeBinaryElements();
		this.pMaybeFieldAccessValue = new MaybeFieldAccessValueElements();
		this.pPrimary = new PrimaryElements();
		this.pStringValue = new StringValueElements();
		this.pObjectTemplateValue = new ObjectTemplateValueElements();
		this.eOperator = new OperatorElements();
		this.pFQN = new FQNElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.tetrabox.example.Minitl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Transformation:
	//    'transformation'
	//    name=ID
	//    '{'
	//    (inputMetamodel=InputMetamodel)?
	//    ('outputMetamodel' outputMetamodel=Metamodel)?
	//    (rules+=Rule (rules+=Rule)*)?
	//    '}';
	public TransformationElements getTransformationAccess() {
		return pTransformation;
	}
	
	public ParserRule getTransformationRule() {
		return getTransformationAccess().getRule();
	}
	
	//InputMetamodel returns Metamodel:
	//    'inputMetamodel' Metamodel;
	public InputMetamodelElements getInputMetamodelAccess() {
		return pInputMetamodel;
	}
	
	public ParserRule getInputMetamodelRule() {
		return getInputMetamodelAccess().getRule();
	}
	
	//Metamodel:
	//    packages+=[ecore::EPackage|FQN] ("," packages+=[ecore::EPackage|FQN])*;
	public MetamodelElements getMetamodelAccess() {
		return pMetamodel;
	}
	
	public ParserRule getMetamodelRule() {
		return getMetamodelAccess().getRule();
	}
	
	//Rule returns Rule:
	//    'rule'
	//    name=ID
	//    '{'
	//    'from' objectTemplates+=ObjectTemplate
	//    'to' objectTemplates+=ObjectTemplate
	//    '}';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//ObjectTemplate:
	//    name=ID ':' type=[ecore::EClass|FQN]
	//    ('{'
	//    (bindings+=Binding (";" bindings+=Binding)*)? ';'?
	//    '}')?;
	public ObjectTemplateElements getObjectTemplateAccess() {
		return pObjectTemplate;
	}
	
	public ParserRule getObjectTemplateRule() {
		return getObjectTemplateAccess().getRule();
	}
	
	//Binding:
	//    feature=[ecore::EStructuralFeature|ID] '=' value=Value;
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}
	
	//Value:
	//    MaybeBinary;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//MaybeBinary returns Value:
	//    MaybeFieldAccessValue ({BinaryExpression.expressions+=current} operator=Operator expressions+=MaybeFieldAccessValue)*;
	public MaybeBinaryElements getMaybeBinaryAccess() {
		return pMaybeBinary;
	}
	
	public ParserRule getMaybeBinaryRule() {
		return getMaybeBinaryAccess().getRule();
	}
	
	//MaybeFieldAccessValue returns Value:
	//    Primary ({FieldAccessValue.object=current} '.' feature=[ecore::EStructuralFeature|ID])*;
	public MaybeFieldAccessValueElements getMaybeFieldAccessValueAccess() {
		return pMaybeFieldAccessValue;
	}
	
	public ParserRule getMaybeFieldAccessValueRule() {
		return getMaybeFieldAccessValueAccess().getRule();
	}
	
	//Primary returns Value:
	//    StringValue | ObjectTemplateValue | '(' MaybeBinary ')';
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//StringValue:
	//    value=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//ObjectTemplateValue:
	//    objecttemplate=[ObjectTemplate|ID];
	public ObjectTemplateValueElements getObjectTemplateValueAccess() {
		return pObjectTemplateValue;
	}
	
	public ParserRule getObjectTemplateValueRule() {
		return getObjectTemplateValueAccess().getRule();
	}
	
	//enum Operator returns Operator:
	//    ADD='+' | SUB='-';
	public OperatorElements getOperatorAccess() {
		return eOperator;
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//FQN:
	//    ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
